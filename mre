#!/bin/bash

# PROD_COMPOSE_FILES=("monitoring" "microservices.base" "microservices.prod")
PROD_COMPOSE_FILES=("microservices.base" "microservices.prod")
DEV_COMPOSE_FILES=("microservices.base" "microservices.dev")

prod_compose_files_argument=$(printf " -f ./docker-compose.%s.yml" "${PROD_COMPOSE_FILES[@]}")
dev_compose_files_argument=$(printf " -f ./docker-compose.%s.yml" "${DEV_COMPOSE_FILES[@]}")

# environment variables are in *.env files
initEnv() {
    if test -f "$1"; then
        while read LINE; do
            if  [[ $LINE != \#* ]] && [[ $LINE != "" ]];
            then
            eval "export $LINE"
            fi
        done < $1
    fi
}

configDev() {
    echo "checking dev config..."
    docker-compose $dev_compose_files_argument config
}

configProd() {
    echo "checking prod config..."
    docker-compose $prod_compose_files_argument config
}

dev() {
    echo "Starting microrealestate..."
    docker-compose $dev_compose_files_argument rm --stop --force
    docker-compose $dev_compose_files_argument up --build --remove-orphans
}

status() {
    docker-compose $prod_compose_files_argument ps
}

build() {
    echo "Building microrealestate $1..."
    docker-compose $prod_compose_files_argument rm --stop --force $1
    docker-compose $prod_compose_files_argument build --no-cache $1
}

start() {
    echo "Starting microrealestate $1..."
    # if [ ! -d ./data/elasticsearch ]; then
    #     mkdir -p ./data/elasticsearch;
    # fi
    if [ ! -d ./data/mongodb ]; then
        mkdir -p ./data/mongodb;
    fi
    if [ -n "$1" ]; then
        docker-compose $prod_compose_files_argument up -d $1 # > /dev/null
    else
        docker-compose $prod_compose_files_argument up -d --force-recreate --remove-orphans # > /dev/null
    fi
    local res=$?;
    if [ $res -ne 0 ]; then
        stop
        echo "ERROR: Fail to start microrealestate $1" >&2
    else
        if [ -z "$1" ]; then
            status
            echo ""
            echo "Front-end                 http://localhost:$NGINX_PORT/app"
            echo "Deprecated Front-end      http://localhost:$NGINX_PORT"
            # echo "kibana                http://localhost:$KIBANA_PORT"
            # echo "cadvisor              http://localhost:$CADVISOR_PORT"
            # echo "rabbitmq Management   http://localhost:$RABBITMQ_MANAGEMENT_PORT"
        fi
    fi
    return $res
}

stop() {
    echo "Stopping microrealestate $1..."
    docker-compose $prod_compose_files_argument rm -sf $1 > /dev/null
}

display_help() {
    echo "Usage: $0 [option...] {dev|build|status|start|stop|restart|config-dev|config-prod}" >&2
}

case "$1" in
    config-dev)
        initEnv dev.env
        initEnv .env
        configDev;;
    config-prod)
        initEnv prod.env
        initEnv .env
        configProd;;
    dev)
        initEnv dev.env
        initEnv .env
        dev
        ;;
    status)
        initEnv prod.env
        initEnv .env
        status
        ;;
    build)
        initEnv prod.env
        initEnv .env
        build $2
        ;;
    start)
        initEnv prod.env
        initEnv .env
        start $2
        ;;
    stop)
        initEnv prod.env
        initEnv .env
        stop $2
        ;;
    restart)
        initEnv prod.env
        initEnv .env
        stop $2
        start $2
        ;;
    -h | --help)
        display_help
        exit 0
        ;;
    *)
        display_help
        exit 1
        ;;
esac